from enum import Enum

import psycopg2
from jinja2 import Template

"""
    GENERAL FUNCTION AND CLASS DEFINITIONS
"""

def get_authenticated_user():
    """Return hardcoded UUID until we get real authentication in place."""
    return "615957e8-4aa1-4319-a787-f1f7ad6b5e2c"


def get_field_names(type):
    """Return the field names from the PostgreSQL type in question.

    TODO: Ask PostgreSQL for the list of fields for the type in question. For
    the time being, just return the names of the fields for "FacetEgenskaber".
    """
    if type == "FacetEgenskaberAttrType":
        return ['brugervendtnoegle', 'facetbeskrivelse', 'facetplan',
        'facetopbygning', 'facetophavsret', 'facetsupplement', 'retskilde',
        'virkning']
    else:
        raise NotImplemented


class Livscyklus(Enum):
    OPSTAAET = 'Opstaaet'
    IMPORTERET = 'Importeret'
    PASSIVERET = 'Passiveret'
    SLETTET = 'Slettet'
    RETTET = 'Rettet'


"""
    FACET RELATED FUNCTIONS
"""

def facet_exists(uuid):
    """Check if a facet with this UUID exists already."""
    # TODO: Implement this!
    non_existing_uuids = ["5da36f77-f8d3-4bfd-b313-cc38e2d667fd"]
    return not uuid in non_existing_uuids


def create_or_import_facet(note, attributes, states, relations, uuid=None): 
    """Create a new facet by calling the stored procedure.

    Create a new facet by calling actual_state_create_or_import_facet. It is
    necessary to map the parameters to our custom PostgreSQL data types.
    """

    # Data from the BaseRegistration.
    # Do not supply date, is generated by DB.
    life_cycle_code = (Livscyklus.OPSTAAET.value if uuid is None
            else Livscyklus.IMPORTERET.value)
    user_ref = get_authenticated_user()

    # Convert attributes from JSON dictionary to simple list
    # in correct order.
    for attr_name in attributes:
        current_attr_periods = attributes[attr_name]
        converted_attr_periods = []
        for attr_period in current_attr_periods:
            current_attr_type = '{0}AttrType'.format(attr_name)
            field_names = get_field_names(current_attr_type)
            attr_value_list = [
                    attr_period[f] if f in attr_period else None for f in field_names 
            ]
            converted_attr_periods.append(attr_value_list)
        attributes[attr_name] = converted_attr_periods

    with open('templates/sql/create_facet.sql', 'r') as f:
        sql_raw = f.read()
    sql_template = Template(sql_raw)
    sql = sql_template.render(
            uuid=uuid,
            life_cycle_code=life_cycle_code,
            user_ref=user_ref,
            note=note,
            states=states,
            attributes=attributes,
            relations=relations)
    # TODO: Call Postgres! Return OK or not accordingly
    print sql
    return sql


def passivate_facet(note, uuid):
    """Passivate facet by calling the stored procedure."""
 
    user_ref = get_authenticated_user()
    life_cycle_code = Livscyklus.PASSIVERET.value
    sql_raw = """
    SELECT * FROM actual_state_update_facet(
        '{{ uuid }}',
        '{{ user_ref }}',
        '{{ note }}',
        '{{ life_cycle_code }}',
        null,
        null,
        null);
    """
    sql_template = Template(sql_raw)
    sql = sql_template.render(
            uuid=uuid,
            life_cycle_code=life_cycle_code,
            user_ref=user_ref,
            note=note)
    # TODO: Call PostgreSQL
    print sql
    return sql




    

