To install, run install.sh

Then, activate the virtualenv by running:
  source python-env/bin/activate

To run, run:
  python app.py

Then, go to http://localhost:5000/site-map to see a map of all available URLs


File upload
=========================================
When performing an import/create/update operation on a Dokument, it is
possible to simultaneously upload files.
These requests should be made using multipart/form-data encoding.
The encoding is the same used for HTML upload forms.
The JSON input for the request should be specified in a "form" field called
"json". Any uploaded files should be included in the multpart/form-data
request as separate "form" fields.
The "indhold" attribute of any DokumentDel must point be a URI pointing to
one of these uploaded file "fields". The URI must be of the format:
   field:myfield
where myfield is the "form" field name of the uploaded file included in
the request that should be referenced by the DokumentDel.

File download
=========================================
When performing a read/list operation on a Dokument, the DokumentDel
subobjects returned will include an "indhold" attribute. This attribute has
a value that is the "content URI" of that file on the OIO REST API server.
An example:
  "indhold": "store:2015/08/14/11/53/4096a8df-ace7-477e-bda1-d5fdd7428a95.bin"

To download the file referenced by this URI, you must construct a request
similar to the following:
http://localhost:5000/dokument/dokument/2015/08/14/11/53/4096a8df-ace7-477e-bda1-d5fdd7428a95.bin

SAML Authentication
==========================================
To test SAML authentication, do the following:

You need a running STS (Security Token Service) running on your IdP.
An open-source STS is available from http://wso2.com/products/identity-server/
and is useful for testing. Download the binary, and follow the instructions
to run it.

To configure a STS, follow the instructions on
https://docs.wso2.com/display/IS500/Configuring+the+Identity+Server+to+Issue+Security+Tokens
(skip the part about Holder of Key).

Restart the WSO2 server! The STS endpoint simply did not work until I
restarted the WSO2 server.

OIO-REST SAML settings
------------------------------------------

WSO2's default IdP entity ID is called "localhost". If you are using a
different IdP, you must change the SAML_IDP_ENTITY_ID setting to reflect your
IdP's entity ID.

For testing purposes, WSO2's IdP public certificate file is included in the
distribution.

If you are using a different IdP, you must change, specify the IdP's public
certificate file by setting in settings.py:
  SAML_IDP_CERTIFICATE = '/my/idp/certificate.pem'

In settings.py, turn on SAML authentication:
  USE_SAML_AUTHENTICATION = True


Requesting a SAML token
-------------------------------------------
To request a SAML token, it is useful to use SoapUI.

Download SoapUI (http://www.soapui.org/) and import the project
provided in 'oio_rest/test_auth_data/soapui-saml2-sts-request.xml'.

Navigate to and double-click on:
  "sts" -> "wso2carbon-stsSoap11Binding" -> "Issue token - SAML 2.0"

Note: The value of <a:Address> element in <wsp:AppliesTo> must match your
SAML_MOX_ENTITY_ID setting. Change as needed.

The project assumes you are running the IdP server on https://localhost:9443/
(the default).

Execute the SOAP request. You can copy the response by clicking on the "Raw"
 tab in the right side of the window and then selecting all, and copying to
 the clipboard. Paste the response, making sure that the
 original whitespace/indentation is preserved. Remove all elements/text
 surrounding the <saml2:Assertion>..</saml2:Assertion> tag. Save to a file,
 e.g. /my/saml/assertion.xml.

After requesting a SAML token, to make a REST request using the SAML token,
you need to pass in an HTTP Authorization header of a specific format:
  Authorization: saml-gzipped <base64-encoded gzip-compressed SAML assertion>

A script has been included to generate this HTTP header from a SAML token
XML file. This file must only contain the <saml2:Assertion> element.

To run it:
  python utils/encode_token.py /my/saml/assertion.xml

The output of this script can be used in a curl request by adding the
parameter -H, e.g.:
  curl -H "Authorization saml-gzipped eJy9V1................." ...

to the curl request.

Alternately, if using bash shell:
  curl -H "$(python utils/encode_token.py" /my/saml/assertion.xml) ...